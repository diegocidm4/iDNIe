// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name iDNIe
import BigInt
import CommonCrypto
import Compression
import CoreNFC
import CryptoKit
import CryptoSwift
import CryptoTokenKit
import Foundation
import OpenSSL
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import iDNIe
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(DataGroupId, Swift.Int)
  case error(NFCPassportReaderError)
  case successfulRead
  case successfulSignDocument
  case successfulSignData
  case readCertificate(Swift.Int)
  case secureChannel(Swift.Int)
  case signing(Swift.Int)
  case successfulReadOpenChannel
}
@available(iOS 13, macOS 10.15, *)
extension NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
  public func handleProgress(percentualProgress: Swift.Int) -> Swift.String
}
@_hasMissingDesignatedInitializers public class EstadoLicencia {
  public var descripcion: Swift.String?
  public var APIKeyValida: Swift.Bool
  public var lecturaDGHabilitada: Swift.Bool
  public var autenticacionHabilitada: Swift.Bool
  public var firmaHabilitada: Swift.Bool
  @objc deinit
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: SecureMessagingSupportedAlgorithms, b: SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public var DNIeSecureChannel: Swift.Bool
  public init(encryptionAlgorithm: SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  public init(encryptionAlgorithm: SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8], DNIeSecureChannel: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : DataGroup {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UIUtils {
  public static func mostrarMensaje(titulo: Swift.String, mensaje: Swift.String, textoBoton: Swift.String)
  public static func mostrarMensajeController(controller: UIKit.UIViewController, titulo: Swift.String, mensaje: Swift.String, textoBoton: Swift.String)
  public static func showToast(view: UIKit.UIView, message: Swift.String)
  @objc deinit
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: PassportAuthenticationStatus, b: PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var personalNumber: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var documentSigningCertificate: X509Wrapper? {
    get
  }
  public var countrySigningCertificate: X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [DataGroupId] {
    get
  }
  public var dataGroupsRead: [DataGroupId : DataGroup] {
    get
  }
  public var dataGroupHashes: [DataGroupId : DataGroupHash] {
    get
  }
  public var cardAccess: CardAccess? {
    get
  }
  public var BACStatus: PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [any Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public var fatherName: Swift.String? {
    get
  }
  public var motherName: Swift.String? {
    get
  }
  public var authCert: DigitalCert?
  public var signCert: DigitalCert?
  public var dgpCert: DigitalCert?
  public var CAComponenteBase64: Swift.String?
  public var CAComponent: Foundation.Data?
  public var CAIntermediaBase64: Swift.String?
  public var CAIntermedia: Foundation.Data?
  public var version: Swift.Int
  public var rnd_ifd: [Swift.UInt8]?
  public var rnd_icc: [Swift.UInt8]?
  public var kicc: [Swift.UInt8]?
  public var kifd: [Swift.UInt8]?
  public var chipinfo: [Swift.UInt8]?
  public var kenc: [Swift.UInt8]?
  public var kmac: [Swift.UInt8]?
  public var ssc: [Swift.UInt8]?
  public var signedMessage: [Swift.UInt8]?
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: DataGroupId, dataGroup: DataGroup)
  public func getDataGroup(_ id: DataGroupId) -> DataGroup?
  public func dumpPassportData(selectedDataGroups: [DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> ASN1Item
  public func test()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PrivateCert {
  public var CKA_ID: Swift.String?
  public var CKA_LABEL: Swift.String?
  public var path: Swift.String?
  public var certificadoBase64: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DigitalCert {
  public var publicCert: PublicCert?
  public var privateCert: PrivateCert?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : DataGroup {
  public var securityInfos: [SecurityInfo] {
    get
  }
  @objc deinit
}
public enum DNIeSingPadding : Swift.String {
  case PKCS
  case PSS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, *)
public class PACEHandler {
  public static let NO_PACE_KEY_REFERENCE: Swift.UInt8
  public static let MRZ_PACE_KEY_REFERENCE: Swift.UInt8
  public static let CAN_PACE_KEY_REFERENCE: Swift.UInt8
  public init(cardAccess: CardAccess, tagReader: TagReader) throws
  public func doPACE(paceKeySeed: Swift.String, paceKeyReference: Swift.UInt8, completed: @escaping (Swift.Bool) -> ())
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HexadecimalUtils {
  public static func getDirectoryFromPath(path: Swift.String) -> [Swift.UInt8]?
  public static func getFileFromPath(path: Swift.String) -> [Swift.UInt8]?
  public static func getIDFromPath(path: Swift.String) -> [Swift.UInt8]?
  public static func convertPathToHex(path: Swift.String) -> [Swift.UInt8]?
  public static func convertPartPathToHex(path: Swift.String) -> Swift.UInt8?
  public static func convertLeftCharToHex(caracter: Swift.String) -> Swift.UInt8?
  public static func convertRightCharToHex(caracter: Swift.String) -> Swift.UInt8?
  public static func convertIntToUInt8Array(entero: Swift.Int) -> [Swift.UInt8]?
  public static func convertHexaStringtoUInt8Array(hexString: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
extension Swift.Array where Element == Swift.UInt8 {
  public func bytesToHex(spacing: Swift.String) -> Swift.String
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(logLevel: LogLevel = .info, masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  public func readPassport(accessKey: Swift.String, paceKeyReference: Swift.UInt8, tags: [DataGroupId] = [], skipSecureElements: Swift.Bool = true, customDisplayMessage: ((NFCViewDisplayMessage) -> Swift.String?)? = nil, leeCertificadosPublicos: Swift.Bool = true, completed: @escaping (NFCPassportModel?, NFCPassportReaderError?) -> ())
  public func signTextDNIe(accessKey: Swift.String, pin: Swift.String, datosFirma: Swift.String, signPadding: DNIeSingPadding = .PKCS, certToUse: DNIeCertificates?, passport: NFCPassportModel?, paceKeyReference: Swift.UInt8, tags: [DataGroupId] = [], skipSecureElements: Swift.Bool = true, customDisplayMessage: ((NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (NFCPassportModel?, NFCPassportReaderError?) -> ())
  public func signDocumentDNIe(accessKey: Swift.String, pin: Swift.String, document: Foundation.URL, signPadding: DNIeSingPadding = .PKCS, certToUse: DNIeCertificates, passport: NFCPassportModel?, paceKeyReference: Swift.UInt8, tags: [DataGroupId] = [], skipSecureElements: Swift.Bool = true, customDisplayMessage: ((NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (NFCPassportModel?, NFCPassportReaderError?) -> ())
  public func signHashDNIe(accessKey: Swift.String, pin: Swift.String, hash: [Swift.UInt8], digest: [Swift.UInt8], signPadding: DNIeSingPadding = .PKCS, certToUse: DNIeCertificates, passport: NFCPassportModel?, paceKeyReference: Swift.UInt8, tags: [DataGroupId] = [], skipSecureElements: Swift.Bool = true, customDisplayMessage: ((NFCViewDisplayMessage) -> Swift.String?)? = nil, operacion: DNIeOperations, completed: @escaping (NFCPassportModel?, NFCPassportReaderError?) -> ())
  public func authenticationDNIe(accessKey: Swift.String, pin: Swift.String, passport: NFCPassportModel?, paceKeyReference: Swift.UInt8, tags: [DataGroupId] = [], skipSecureElements: Swift.Bool = true, customDisplayMessage: ((NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (NFCPassportModel?, NFCPassportReaderError?) -> ())
  public func authenticationDNIeOpenSession(accessKey: Swift.String, pin: Swift.String, passport: NFCPassportModel?, paceKeyReference: Swift.UInt8, tags: [DataGroupId] = [], skipSecureElements: Swift.Bool = true, customDisplayMessage: ((NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (NFCPassportModel?, NFCPassportReaderError?) -> ())
  public func signChallengeDNIe(hash: [Swift.UInt8], digest: [Swift.UInt8], signPadding: DNIeSingPadding = .PKCS, passport: NFCPassportModel?, paceKeyReference: Swift.UInt8, customDisplayMessage: ((NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (NFCPassportModel?, NFCPassportReaderError?) -> ())
  @objc deinit
}
@available(iOS 13, *)
extension PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
  case SecureChannelError
  case PINError(Swift.String)
  case PINLengthError
  case IncorrectOperationError
  case InvalidAccess
}
@available(iOS 13, macOS 10.15, *)
extension NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup12 : DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: PACEMappingType, b: PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DatosCertificadoUtils {
  public static func obtenerTodosDatosCertificado(certificadoASN1: [ASN1Item]) throws -> DatosCertificado
  @objc deinit
}
public struct iDNIe {
  public init()
  public static func configure(apiKey: Swift.String) -> EstadoLicencia
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: CertificateType, b: CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PkiUtils {
  public static func decrypt(modulus: [Swift.UInt8], publicExponent: [Swift.UInt8], privateExponent: [Swift.UInt8], message: [Swift.UInt8]) throws -> [Swift.UInt8]
  public static func encrypt(modulus: [Swift.UInt8], publicExponent: [Swift.UInt8], privateExponent: [Swift.UInt8], message: [Swift.UInt8]) throws -> [Swift.UInt8]
  public static func encrypt(modulus: [Swift.UInt8], publicExponent: [Swift.UInt8], message: [Swift.UInt8]) throws -> [Swift.UInt8]
  public static func getRSAKey(modulus: [Swift.UInt8], publicExponent: [Swift.UInt8], privateExponent: [Swift.UInt8]?) -> CryptoSwift.RSA
  public static func encryptWithDer(base64Cert: Swift.String, message: [Swift.UInt8]) throws -> [Swift.UInt8]?
  public static func getPubKey(base64Cert: Swift.String) throws -> Security.SecKey?
  public static func getPubCertificate(base64Cert: Swift.String) throws -> Security.SecCertificate?
  public static func getPubKey(pubCertificate: Security.SecCertificate) throws -> Security.SecKey?
  public static func getModulus(publicKey: Security.SecKey) throws -> [Swift.UInt8]?
  public static func getModulusPSS(publicKey: Security.SecKey) throws -> [Swift.UInt8]?
  public static func getModulusFromPubCertificate(base64Cert: Swift.String) throws -> [Swift.UInt8]?
  public static func getModulusSizeInBits(modulus: [Swift.UInt8]) throws -> Swift.Int
  public static func parsePublicSecKey(publicKey: Security.SecKey) throws -> (mod: Foundation.Data, exp: Foundation.Data)
  public static func encryptWithSecKey(publicKey: Security.SecKey, message: [Swift.UInt8]) throws -> [Swift.UInt8]?
  public static func calculaHash256(prnd: [Swift.UInt8], kic: [Swift.UInt8], rnd: [Swift.UInt8], sn: [Swift.UInt8]) -> [Swift.UInt8]
  public static func calculaHash256(kifdicc: [Swift.UInt8], valor: [Swift.UInt8]) -> [Swift.UInt8]
  public static func calculaHash256(firma: [Swift.UInt8]) -> [Swift.UInt8]
  public static func calculaHash1(prnd: [Swift.UInt8], kic: [Swift.UInt8], rnd: [Swift.UInt8], sn: [Swift.UInt8]) -> [Swift.UInt8]
  public static func calculaHash1(firma: [Swift.UInt8]) -> [Swift.UInt8]
  public static func calculaHash224(firma: [Swift.UInt8]) -> [Swift.UInt8]
  public static func calculaHash384(firma: [Swift.UInt8]) -> [Swift.UInt8]
  public static func calculaHash512(firma: [Swift.UInt8]) -> [Swift.UInt8]
  public static func verificaPaddingPSS(message: Swift.String, encodedMessage: [Swift.UInt8], digestInfo: [Swift.UInt8], tamanoClave: Swift.Int, modulus: [Swift.UInt8]) -> Swift.Bool
  public static func calculaPaddingPSS(hash: [Swift.UInt8], digestInfo: [Swift.UInt8], tamanoClave: Swift.Int, modulus: [Swift.UInt8]) -> [Swift.UInt8]
  public static func calculaPaddingPKCS(hash: [Swift.UInt8], digestInfo: [Swift.UInt8], tamanoClave: Swift.Int) -> [Swift.UInt8]
  public static func sigMin(moduloICC: [Swift.UInt8], intermedio: [Swift.UInt8]) -> [Swift.UInt8]
  public static func restaModuloMensaje(moduloICC: [Swift.UInt8], intermedio: [Swift.UInt8]) -> [Swift.UInt8]
  public static func xor(valor1: [Swift.UInt8], valor2: [Swift.UInt8]) -> [Swift.UInt8]
  public static func calculaKenc(kifdicc: [Swift.UInt8]) -> [Swift.UInt8]
  public static func calculaKmac(kifdicc: [Swift.UInt8]) -> [Swift.UInt8]
  public static func incrementaSSC(ssc: [Swift.UInt8]) -> [Swift.UInt8]
  public static func generaHash(filePath: Swift.String) -> CryptoKit.SHA256.Digest?
  public static func getDocumentHash(url: Foundation.URL) throws -> [Swift.UInt8]
  public static func getSHA256(url: Foundation.URL) throws -> CryptoKit.SHA256.Digest
  public static func getPemFromBase64(base64String: Swift.String) -> Swift.String
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
public class DatosICAO {
  public var DG1: Swift.String?
  public var DG2: Swift.String?
  public var DG13: Swift.String?
  public var SOD: Swift.String?
  public init()
  public func inicializa()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
public enum DNIeOperations : Swift.String {
  case LECTURA
  case AUTENTICACION
  case FIRMA_DATOS
  case FIRMA_DOCUMENTO
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DNIeCertificates : Swift.String {
  case AUTENTICACION
  case FIRMA
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class DatosCertificado {
  public var nif: Swift.String
  public var nombre: Swift.String
  public var apellidos: Swift.String
  public var fechaNacimiento: Swift.String
  public var tipo: Swift.String
  public var nifRepresentante: Swift.String
  public var nombreRepresentante: Swift.String
  public var apellidosRepresentante: Swift.String
  public var fechaInicioValidez: Swift.String
  public var fechaFinValidez: Swift.String
  public var estado: Swift.Int
  public var email: Swift.String
  public init()
  public func inicializa()
  public func convierteDatosDnie() -> DatosDNIe
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InternalAuthentication {
  public var inicio: [Swift.UInt8]?
  public var prnd1: [Swift.UInt8]?
  public var kicc: [Swift.UInt8]?
  public var hash: [Swift.UInt8]?
  public var fin: [Swift.UInt8]?
  @objc deinit
}
public class DatosDNIe {
  public init()
  public init(nif: Swift.String, nombreCompleto: Swift.String, nombre: Swift.String, apellido1: Swift.String, apellido2: Swift.String, firma: UIKit.UIImage, imagen: UIKit.UIImage, fechaNacimiento: Swift.String, provinciaNacimiento: Swift.String, municipioNacimiento: Swift.String, nombrePadre: Swift.String, nombreMadre: Swift.String, fechaValidez: Swift.String, emisor: Swift.String, nacionalidad: Swift.String, sexo: Swift.String, direccion: Swift.String, provinciaActual: Swift.String, municipioActual: Swift.String, numSoporte: Swift.String, certificadoAutenticacion: DatosCertificado?, certificadoFirma: DatosCertificado?, certificadoCA: DatosCertificado?, integridadDocumento: Swift.Bool?, pemCertificadoFirmaSOD: Swift.String?, can: Swift.String?)
  public func getNif() -> Swift.String?
  public func setNif(nif: Swift.String)
  public func getNombreCompleto() -> Swift.String?
  public func setNombreCompleto(nombreCompleto: Swift.String)
  public func getNombre() -> Swift.String?
  public func setNombre(nombre: Swift.String)
  public func getApellido1() -> Swift.String?
  public func setApellido1(apellido1: Swift.String)
  public func getApellido2() -> Swift.String?
  public func setApellido2(apellido2: Swift.String)
  public func getFirma() -> UIKit.UIImage?
  public func setFirma(firma: UIKit.UIImage?)
  public func getImagen() -> UIKit.UIImage?
  public func setImagen(imagen: UIKit.UIImage?)
  public func getFechaNacimiento() -> Swift.String?
  public func setFechaNacimiento(fechaNacimiento: Swift.String)
  public func getProvinciaNacimiento() -> Swift.String?
  public func setProvinciaNacimiento(provinciaNacimiento: Swift.String)
  public func getMunicipioNacimiento() -> Swift.String?
  public func setMunicipioNacimiento(municipioNacimiento: Swift.String)
  public func getNombrePadre() -> Swift.String?
  public func setNombrePadre(nombrePadre: Swift.String)
  public func getNombreMadre() -> Swift.String?
  public func setNombreMadre(nombreMadre: Swift.String)
  public func getfechaValidez() -> Swift.String?
  public func setfechaValidez(fechaValidez: Swift.String?)
  public func getemisor() -> Swift.String?
  public func setemisor(emisor: Swift.String)
  public func getnacionalidad() -> Swift.String?
  public func setnacionalidad(nacionalidad: Swift.String)
  public func getsexo() -> Swift.String?
  public func setsexo(sexo: Swift.String)
  public func getdireccion() -> Swift.String?
  public func setdireccion(direccion: Swift.String)
  public func getprovinciaActual() -> Swift.String?
  public func setprovinciaActual(provinciaActual: Swift.String)
  public func getmunicipioActual() -> Swift.String?
  public func setmunicipioActual(municipioActual: Swift.String)
  public func getnumSoporte() -> Swift.String?
  public func setnumSoporte(numSoporte: Swift.String?)
  public func getcertificadoAutenticacion() -> DatosCertificado?
  public func setcertificadoAutenticacion(certificadoAutenticacion: DatosCertificado?)
  public func getcertificadoFirma() -> DatosCertificado?
  public func setcertificadoFirma(certificadoFirma: DatosCertificado?)
  public func getcertificadoCA() -> DatosCertificado?
  public func setcertificadoCA(certificadoCA: DatosCertificado?)
  public func getPassport() -> NFCPassportModel?
  public func setPassport(passport: NFCPassportModel?)
  public func getIntegridadDocumento() -> Swift.Bool?
  public func setIntegridadDocumento(integridadDocumento: Swift.Bool?)
  public func getpemCertificadoFirmaSOD() -> Swift.String?
  public func setpemCertificadoFirmaSOD(pemCertificadoFirmaSOD: Swift.String?)
  public func getdatosICAO() -> DatosICAO?
  public func setdatosICAO(datosICAO: DatosICAO?)
  public func getCan() -> Swift.String?
  public func setCan(can: Swift.String?)
  public func geterroresVerificacion() -> [any Swift.Error]?
  public func seterroresVerificacion(erroresVerificacion: [any Swift.Error]?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DNIeUtils {
  public static func obtenerTodosDatosDNIe(dnie: NFCPassportModel) -> DatosDNIe
  public static func convertImageToBase64(image: UIKit.UIImage) -> Swift.String
  public static func convertBase64ToImage(imageString: Swift.String) -> UIKit.UIImage
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringUtils {
  public static func localizedString(forKey key: Swift.String) -> Swift.String
  public static func localizedStringFramework(forKey key: Swift.String) -> Swift.String
  public static func nacimientoToDate(cadena: Swift.String) -> Foundation.Date?
  public static func stringToDate(cadena: Swift.String, formato: Swift.String) -> Foundation.Date?
  public static func formateaFecha(fecha: Foundation.Date, formato: Swift.String) -> Swift.String?
  public static func UCTStringToString(utcString: Swift.String, formato: Swift.String) -> Swift.String
  public static func recuperasw1(cadena: Swift.String) -> Swift.String?
  public static func recuperasw2(cadena: Swift.String) -> Swift.String?
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParserDNIe {
  public init()
  public func parse(data: Foundation.Data) throws -> [ASN1Item]
  public func test()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PublicCert {
  public var CKA_ID: Swift.String?
  public var CKA_LABEL: Swift.String?
  public var path: Swift.String?
  public var commonName: Swift.String?
  public var certificadoBase64: Swift.String?
  public var certificadoASN1: [ASN1Item]?
  @objc deinit
}
extension Swift.String {
  public var length: Swift.Int {
    get
  }
  public func indexOf(target: Swift.String) -> Swift.Int?
  public func lastIndexOf(target: Swift.String) -> Swift.Int?
  public func contains(s: Swift.String) -> Swift.Bool
  public func index(from: Swift.Int) -> Swift.String.Index
  public func substring(from: Swift.Int) -> Swift.String
  public func substring(to: Swift.Int) -> Swift.String
  public func substring(with r: Swift.Range<Swift.Int>) -> Swift.String
  public func splitea(separador: Swift.Character) -> [Swift.String]
  public func splitea(separador: Swift.String) -> [Swift.String]
  public func startsWith(cadena: Swift.String) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [SecurityInfo] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ASN1ParseUtils {
  public static func parseaCDF(passport: NFCPassportModel, data: [Swift.UInt8]) throws -> NFCPassportModel
  public static func parseaPrKDF(passport: NFCPassportModel, data: [Swift.UInt8]) throws -> NFCPassportModel
  public static func parseaCertificado(asn1Array: [ASN1Item]) throws -> DatosCertificado
  public static func convierteEnFecha(strDate: Swift.String, withFormat format: Swift.String = "dd/MM/yyyy") -> Foundation.Date?
  @objc deinit
}
public class PassportUtils {
  public init()
  public func getMRZKey(passportNumber: Swift.String, dateOfBirth: Swift.String, dateOfExpiry: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup13 : DataGroup {
  public var apellido1: Swift.String? {
    get
  }
  public var apellido2: Swift.String? {
    get
  }
  public var nombre: Swift.String? {
    get
  }
  public var nif: Swift.String? {
    get
  }
  public var fechaNacimiento: Swift.String? {
    get
  }
  public var pais: Swift.String? {
    get
  }
  public var fechaValidez: Swift.String? {
    get
  }
  public var numeroSoporte: Swift.String? {
    get
  }
  public var sexo: Swift.String? {
    get
  }
  public var provinciaNacimiento: Swift.String? {
    get
  }
  public var municipioNacimiento: Swift.String? {
    get
  }
  public var nombrePadre: Swift.String? {
    get
  }
  public var nombreMadre: Swift.String? {
    get
  }
  public var direccion: Swift.String? {
    get
  }
  public var provinciaResidencia: Swift.String? {
    get
  }
  public var municipioResidencia: Swift.String? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: TagReader)
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (_ error: NFCPassportReaderError?) -> ())
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NFCUtils {
  public static let CERT_ALIAS_AUTH: Swift.String
  public static let CERT_ALIAS_SIGN: Swift.String
  public static let CERT_ALIAS_INTERMEDIATE_CA: Swift.String
  public static let CERT_ALIAS_SIGNALIAS: Swift.String
  public static let CERT_ALIAS_CYPHER: Swift.String
  public static let AUTH_KEY_LABEL: Swift.String
  public static let SIGN_KEY_LABEL: Swift.String
  public static let CYPH_KEY_LABEL: Swift.String
  public static let MASTER_FILE_NAME: Swift.String
  public static let SHA1_LENGTH: Swift.Int
  public static let SHA256_LENGTH: Swift.Int
  public static let KICC_LENGTH: Swift.Int
  public static let KIFD_LENGTH: Swift.Int
  public static let ISO_9796_2_PADDING_START: Swift.Int
  public static let ISO_9796_2_PADDING_END: Swift.Int
  public static let CHR_C_CV_CA_V1: [Swift.UInt8]
  public static let C_CV_CA_V1: [Swift.UInt8]
  public static let C_CV_IFD_V1: [Swift.UInt8]
  public static let CHR_C_CV_IFD_V1: [Swift.UInt8]
  public static let IFD_PRIVATE_KEY_MODULUS_V1: [Swift.UInt8]
  public static let IFD_PRIVATE_KEY_EXPONENT_V1: [Swift.UInt8]
  public static let IFD_PUBLIC_KEY_EXPONENT_V1: [Swift.UInt8]
  public static let C_CV_IFD_PIN_V1: [Swift.UInt8]
  public static let CHR_C_CV_IFD_PIN_V1: [Swift.UInt8]
  public static let IFD_PRIVATE_KEY_MODULUS_PIN_V1: [Swift.UInt8]
  public static let IFD_PRIVATE_KEY_EXPONENT_PIN_V1: [Swift.UInt8]
  public static let IFD_PUBLIC_KEY_EXPONENT_PIN_V1: [Swift.UInt8]
  public static let CHR_C_CV_CA_V2: [Swift.UInt8]
  public static let C_CV_CA_V2: [Swift.UInt8]
  public static let C_CV_IFD_V2: [Swift.UInt8]
  public static let CHR_C_CV_IFD_V2: [Swift.UInt8]
  public static let IFD_PRIVATE_KEY_MODULUS_V2: [Swift.UInt8]
  public static let IFD_PRIVATE_KEY_EXPONENT_V2: [Swift.UInt8]
  public static let IFD_PUBLIC_KEY_EXPONENT_V2: [Swift.UInt8]
  public static let C_CV_IFD_PIN_V2: [Swift.UInt8]
  public static let CHR_C_CV_IFD_PIN_V2: [Swift.UInt8]
  public static let IFD_PRIVATE_KEY_MODULUS_PIN_V2: [Swift.UInt8]
  public static let IFD_PRIVATE_KEY_EXPONENT_PIN_V2: [Swift.UInt8]
  public static let IFD_PUBLIC_KEY_EXPONENT_PIN_V2: [Swift.UInt8]
  public static func get_chr_c_cv_ca(version: Swift.Int) -> [Swift.UInt8]
  public static func get_c_cv_ca(version: Swift.Int) -> [Swift.UInt8]
  public static func get_c_cv_ifd(solicitaPin: Swift.Bool, version: Swift.Int) -> [Swift.UInt8]
  public static func get_chr_c_cv_ifd(solicitaPin: Swift.Bool, version: Swift.Int) -> [Swift.UInt8]
  public static func get_ifd_private_key_modulus(solicitaPin: Swift.Bool, version: Swift.Int) -> [Swift.UInt8]
  public static func get_ifd_private_key_exponent(solicitaPin: Swift.Bool, version: Swift.Int) -> [Swift.UInt8]
  public static func get_ifd_public_key_exponent(solicitaPin: Swift.Bool, version: Swift.Int) -> [Swift.UInt8]
  public static let CA_COMPONENT_PUBLIC_KEY: [Swift.UInt8]
  public static let SHA1_DIGESTINFO_HEADER: [Swift.UInt8]
  public static let SHA224_DIGESTINFO_HEADER: [Swift.UInt8]
  public static let SHA256_DIGESTINFO_HEADER: [Swift.UInt8]
  public static let SHA384_DIGESTINFO_HEADER: [Swift.UInt8]
  public static let SHA512_DIGESTINFO_HEADER: [Swift.UInt8]
  public static func decrypt(datos: [Swift.UInt8], keyData: Foundation.Data) -> [Swift.UInt8]?
  public static func decrypt(datos: [Swift.UInt8], privateKey: Security.SecKey) -> [Swift.UInt8]?
  public static func handleProgress(percentualProgress: Swift.Int) -> Swift.String
  public static func customDisplayMessage(displayMessage: NFCViewDisplayMessage) -> Swift.String
  @objc deinit
}
extension SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension SecureMessagingSupportedAlgorithms : Swift.Hashable {}
extension PassportAuthenticationStatus : Swift.Equatable {}
extension PassportAuthenticationStatus : Swift.Hashable {}
extension DNIeSingPadding : Swift.Equatable {}
extension DNIeSingPadding : Swift.Hashable {}
extension DNIeSingPadding : Swift.RawRepresentable {}
extension PACEMappingType : Swift.Equatable {}
extension PACEMappingType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension CertificateItem : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension DocTypeEnum : Swift.RawRepresentable {}
extension DNIeOperations : Swift.Equatable {}
extension DNIeOperations : Swift.Hashable {}
extension DNIeOperations : Swift.RawRepresentable {}
extension DNIeCertificates : Swift.Equatable {}
extension DNIeCertificates : Swift.Hashable {}
extension DNIeCertificates : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension DataGroupId : Swift.RawRepresentable {}
extension LogLevel : Swift.Equatable {}
extension LogLevel : Swift.Hashable {}
extension LogLevel : Swift.RawRepresentable {}
